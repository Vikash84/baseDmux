import os
import pandas as pd
from snakemake import load_configfile
import glob

def get_bd_output(configfile):
    config = load_configfile(configfile)
    outdir = config['OUTDIR']
    indir = config['INDIR']
    demultiplexer = config['DEMULTIPLEXER']
    fast5_files = glob.glob(os.path.join(indir, "*/fast5"))
    run = []
    for f in fast5_files:
    	run.append(os.path.basename(os.path.dirname(f)))
    genome = pd.read_csv(config['RULE_GET_READS_PER_GENOME']['BARCODE_BY_GENOME'], sep = "\t", usecols = ["Genome_ID"], squeeze = True).unique()
    output = [expand(os.path.join(outdir, "reads_per_genome/fast5/{genome}"), genome = genome),
              expand(os.path.join(outdir, "reads_per_genome/fastq/{genome}.fastq.gz"), genome = genome),
              expand(os.path.join(outdir, "demultiplex/{demultiplexer}/{run}/multiqc/multiqc_report.html"), demultiplexer=demultiplexer, run=run), # DEMULTIPLEXING QC
              expand(os.path.join(outdir, "demultiplex/{demultiplexer}/{run}/fast5_per_barcode.done"), demultiplexer=demultiplexer, run=run),
              os.path.join(outdir, "report/demultiplex_report.html"),
              os.path.join(outdir, "basecall/multiqc/multiqc_report.html")]
    return output


output1 = get_bd_output("config_hac_bai3.yaml")
output2 = get_bd_output("config_hac_mod_bai3.yaml")
output3 = get_bd_output("config_hac_vxo16.yaml")
output4 = get_bd_output("config_hac_mod_vxo16.yaml")


subworkflow bd1:
    workdir: "./"
    snakefile: "Snakefile"
    configfile : "config_hac_bai3.yaml"

subworkflow bd2:
    workdir: "./"
    snakefile: "Snakefile"
    configfile : "config_hac_mod_bai3.yaml"

subworkflow bd3:
    workdir: "./"
    snakefile: "Snakefile"
    configfile : "config_hac_vxo16.yaml"

subworkflow bd4:
    workdir: "./"
    snakefile: "Snakefile"
    configfile : "config_hac_mod_vxo16.yaml"

outdir = "data3/projects/xanthopore/baotram/test/results_scratch_1303"
rule all:
    input:
        bd1(output1),
        bd2(output2),
        bd3(output3),
        bd4(output4)

